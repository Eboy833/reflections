1) How did viewing a diff between two versions of a file help you see the bug
that was introduced?

It helped because there were so many lines of code, that it would have 
been really difficult to go through line by line. By looking for the 
differences in the files, we could see the changes that were made 
between the two versions, and thus find the error since the first version
worked as expected.

2) How could having easy access to the entire history of a file make you
a more efficient programmer in the long term?

It will allow you to quickly cross reference changes you or collaborators
have made to a project, and quickly recover from complicated errors in 
code.

3) What do you think are the pros and cons of manually choosing when to 
create a commit, like you do in Got, vs having versions authomatically 
saved like google docs does?

You can make commits when they make sense logically, and functionally
- the program will run, rather than a comit happening in the middle of a
line. Also, it allows you to add comments to exactly what was done, so
other people can understand what changes were made.

4) Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because multiple files are often effected by changes on larger programing
projects, while in some other version control systems, like google docs,
there is less interdependancy between files. 

5) How can you use the commands git log and git diff to view the history of files?

You can use git log to see a list of the commits made to the files in 
chronological order, and the use git diff to compare two commits to see
the changes made between them.

6) How might using version control make you more confident to make changes that could break something?

Because you can always go back to a previous comit if you make changes that cause something to break and are hard to reverse.